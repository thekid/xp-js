/* This class is part of the XP framework
 *
 * $Id$ 
 */

package unittests;

import unittest.TestCase;

/**
 * Test lambdas
 *
 */
public class LambdaTests extends TestCase {

  /**
   * Apply a given function to a list of elements
   *
   */
  private var[] apply(var[] $elements, var $block) {
    $r= [];
    foreach ($element in $elements) {
      $r[]= $block.($element);
    }
    return $r;
  }

  /**
   * Filter a list of elements with a given function
   *
   */
  private var[] filter(var[] $elements, var $block) {
    $r= [];
    foreach ($element in $elements) {
      if ($block.($element)) $r[]= $element;
    }
    return $r;
  }

  /**
   * Test 
   *
   */
  [@test]
  public void doApply() {
    $this.assertEquals([2, 4, 6], $this.apply([1, 2, 3], #{ $a -> $a * 2 }));
  }

  /**
   * Test short syntax
   *
   */
  [@test]
  public void doFilterOdd() {
    $this.assertEquals(
      [2, 4, 6, 8, 10], 
      $this.filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], #{ $a -> !($a & 1) })
    );
  }

  /**
   * Test long syntax
   *
   */
  [@test]
  public void doFilterEven() {
    $this.assertEquals(
      [1, 3, 5, 7, 9], 
      $this.filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], #{ $a -> { $result= $a & 1; return $result; } })
    );
  }

  /**
   * Test 
   *
   */
  [@test]
  public void applyWithCapturing() {
    $mul= 3;
    $this.assertEquals([3, 6, 9], $this.apply([1, 2, 3], #{ $a -> $a * $mul }));
  }

  /**
   * Test 
   *
   */
  [@test]
  public void execution() {
    $this.assertEquals(3, #{ $a -> $a + 1 }.(2));
  }

  /**
   * Test 
   *
   */
  [@test]
  public void executionViaVariable() {
    $plusone= #{ $a -> $a + 1 }; 
    $this.assertEquals(3, $plusone.(2));
  }

  /**
   * Test 
   *
   */
  [@test]
  public void thisCapturing() {
    $greet= #{ -> 'Hello ' ~ $this.name }; 
    $this.assertEquals('Hello thisCapturing', $greet.());
  }
}
