/* This class is part of the XP framework
 *
 * $Id$ 
 */

package unittests;

import unittest.TestCase;
import lang.reflect.Method;

/**
 * Test lang.reflect.Method class
 *
 */
public class MethodTests extends TestCase {
  protected Method $noArgsMethod= Object::class.getMethod('hashCode');
  protected Method $oneArgMethod= Object::class.getMethod('equals');

  /**
   * Tests numParameters()
   *
   */
  [@test]
  public void noArgsMethodNumParameters() {
    $this.assertEquals(0, $this.noArgsMethod.numParameters());
  }

  /**
   * Tests numParameters()
   *
   */
  [@test]
  public void oneArgMethodNumParameters() {
    $this.assertEquals(1, $this.oneArgMethod.numParameters());
  }

  /**
   * Tests getParameters()
   *
   */
  [@test]
  public void noArgsMethodGetParameters() {
    $this.assertEquals([], $this.noArgsMethod.getParameters());
  }

  /**
   * Tests getParameters()
   *
   */
  [@test]
  public void oneArgMethodGetParameters() {
    $params= $this.oneArgMethod.getParameters();
    $this.assertEquals(1, $params.length);
    $this.assertEquals('cmp', $params[0].getName());
    $this.assertEquals('var', $params[0].getTypeName());
    $this.assertEquals(Type::$VAR, $params[0].getType());
  }

  /**
   * Tests getParameter()
   *
   */
  [@test]
  public void oneArgMethodGetFirstParameter() {
    $param= $this.oneArgMethod.getParameter(0);
    $this.assertEquals('cmp', $param.getName());
    $this.assertEquals('var', $param.getTypeName());
    $this.assertEquals(Type::$VAR, $param.getType());
  }

  /**
   * Tests getParameter()
   *
   */
  [@test]
  public void oneArgMethodGetNonExistantParameters() {
    $this.assertNull($this.oneArgMethod.getParameter(1));
  }

  /**
   * Tests getParameter()
   *
   */
  [@test]
  public void noArgsMethodGetNonExistantParameters() {
    $this.assertNull($this.noArgsMethod.getParameter(0));
  }
  
  /**
   * Fixture for the following two tests
   *
   */
  protected abstract var variableReturnTypeFixture();

  /**
   * Tests getReturnTypeName()
   *
   */
  [@test]
  public void variableReturnTypeName() {
    $this.assertEquals('var', self::class.getMethod('variableReturnTypeFixture').getReturnTypeName());
  }

  /**
   * Tests getReturnType()
   *
   */
  [@test]
  public void variableReturnType() {
    $this.assertEquals(Type::$VAR, self::class.getMethod('variableReturnTypeFixture').getReturnType());
  }

  /**
   * Fixture for the following two tests
   *
   */
  protected abstract void voidReturnTypeFixture();

  /**
   * Tests getReturnTypeName()
   *
   */
  [@test]
  public void voidReturnTypeName() {
    $this.assertEquals('void', self::class.getMethod('voidReturnTypeFixture').getReturnTypeName());
  }

  /**
   * Tests getReturnType()
   *
   */
  [@test]
  public void voidReturnType() {
    $this.assertEquals(Type::$VOID, self::class.getMethod('voidReturnTypeFixture').getReturnType());
  }

  /**
   * Fixture for the following two tests
   *
   */
  protected abstract void operate() throws IllegalStateException;

  /**
   * Tests getExceptionNames()
   *
   */
  [@test]
  public void noArgsMethodExceptionNames() {
    $this.assertEquals([], $this.noArgsMethod.getExceptionNames());
  }

  /**
   * Tests getExceptionNames()
   *
   */
  [@test]
  public void operateExceptionNames() {
    $this.assertEquals(
      ['lang.IllegalStateException'], 
      self::class.getMethod('operate').getExceptionNames()
    );
  }

  /**
   * Tests getExceptionTypes()
   *
   */
  [@test]
  public void noArgsMethodExceptionTypes() {
    $this.assertEquals([], $this.noArgsMethod.getExceptionTypes());
  }

  /**
   * Tests getExceptionTypes()
   *
   */
  [@test]
  public void operateExceptionTypes() {
    $this.assertEquals(
      [lang.IllegalStateException::class], 
      self::class.getMethod('operate').getExceptionTypes()
    );
  }
}
