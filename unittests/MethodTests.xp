/* This class is part of the XP framework
 *
 * $Id$ 
 */

package unittests;

import unittest.TestCase;
import lang.reflect.Method;
import lang.reflect.Modifiers;

/**
 * Test lang.reflect.Method class
 *
 */
public class MethodTests extends TestCase {
  protected Method $noArgsMethod= Object::class.getMethod('hashCode');
  protected Method $oneArgMethod= Object::class.getMethod('equals');

  /**
   * Fixture
   *
   */
  protected string[] nameVariants(parent $instance, string $prefix) {
  }

  /**
   * Tests getName()
   *
   */
  [@test]
  public void methodName() {
    $this.assertEquals('hashCode', $this.noArgsMethod.getName());
  }

  /**
   * Tests getComment()
   *
   */
  [@test]
  public void methodComment() {
    $this.assertEquals('Fixture', $this.getClass().getMethod('nameVariants').getComment());
  }

  /**
   * Tests hasAnnotations()
   *
   */
  [@test]
  public void noArgsMethodHasNoAnnotations() {
    $this.assertFalse($this.noArgsMethod.hasAnnotations());
  }

  /**
   * Tests hasAnnotations()
   *
   */
  [@test]
  public void noArgsMethodDoesNotHaveNonExistantAnnotation() {
    $this.assertFalse($this.noArgsMethod.hasAnnotation('any'));
  }

  /**
   * Tests getAnnotations()
   *
   */
  [@test]
  public void noArgsMethodAnnotations() {
    $this.assertEquals([], $this.noArgsMethod.getAnnotations());
  }

  /**
   * Tests getAnnotation()
   *
   */
  [@test, @expect('lang.ElementNotFoundException')]
  public void noArgsMethodNonExistantAnnotation() {
    $this.noArgsMethod.getAnnotation('any');
  }

  /**
   * Tests hasAnnotations()
   *
   */
  [@test]
  public void thisMethodHasAnnotations() {
    $this.assertTrue($this.getClass().getMethod($this.name).hasAnnotations());
  }

  /**
   * Tests hasAnnotations()
   *
   */
  [@test]
  public void thisMethodHasTestAnnotation() {
    $this.assertTrue($this.getClass().getMethod($this.name).hasAnnotation('test'));
  }

  /**
   * Tests getAnnotations()
   *
   */
  [@test]
  public void thisMethodsAnnotations() {
    $this.assertEquals([test : null], $this.getClass().getMethod($this.name).getAnnotations());
  }

  /**
   * Tests getAnnotation()
   *
   */
  [@test]
  public void fixtureMethodNonExistantAnnotation() {
    $this.assertNull($this.getClass().getMethod($this.name).getAnnotation('test'));
  }

  /**
   * Tests getModifiers()
   *
   */
  [@test]
  public void objectHashCodeMethodIsPublic() {
    $this.assertTrue(Modifiers::isPublic($this.noArgsMethod.getModifiers()));
  }

  /**
   * Tests getModifiers()
   *
   */
  [@test]
  public void objectHashCodePublic() {
    $this.assertEquals(['public'], Modifiers::namesOf($this.noArgsMethod.getModifiers()));
  }

  /**
   * Tests numParameters()
   *
   */
  [@test]
  public void noArgsMethodNumParameters() {
    $this.assertEquals(0, $this.noArgsMethod.numParameters());
  }

  /**
   * Tests numParameters()
   *
   */
  [@test]
  public void oneArgMethodNumParameters() {
    $this.assertEquals(1, $this.oneArgMethod.numParameters());
  }

  /**
   * Tests numParameters()
   *
   */
  [@test]
  public void fixtureNumParameters() {
    $this.assertEquals(2, $this.getClass().getMethod('nameVariants').numParameters());
  }

  /**
   * Tests getParameters()
   *
   */
  [@test]
  public void noArgsMethodGetParameters() {
    $this.assertEquals([], $this.noArgsMethod.getParameters());
  }

  /**
   * Tests getParameters()
   *
   */
  [@test]
  public void oneArgMethodGetParameters() {
    $params= $this.oneArgMethod.getParameters();
    $this.assertEquals(1, $params.length);
    $this.assertEquals('cmp', $params[0].getName());
    $this.assertEquals('var', $params[0].getTypeName());
    $this.assertEquals(Type::$VAR, $params[0].getType());
  }

  /**
   * Tests getParameters()
   *
   */
  [@test]
  public void fixtureFirstParameter() {
    $params= $this.getClass().getMethod('nameVariants').getParameters();
    $this.assertEquals(2, $params.length);
    $this.assertEquals('instance', $params[0].getName());
    $this.assertEquals('unittest.TestCase', $params[0].getTypeName());
    $this.assertEquals(unittest.TestCase::class, $params[0].getType());
  }

  /**
   * Tests getParameters()
   *
   */
  [@test]
  public void fixtureSecondParameters() {
    $params= $this.getClass().getMethod('nameVariants').getParameters();
    $this.assertEquals(2, $params.length);
    $this.assertEquals('prefix', $params[1].getName());
    $this.assertEquals('string', $params[1].getTypeName());
    $this.assertEquals(Primitive::$STRING, $params[1].getType());
  }

  /**
   * Tests getParameter()
   *
   */
  [@test]
  public void oneArgMethodGetFirstParameter() {
    $param= $this.oneArgMethod.getParameter(0);
    $this.assertEquals('cmp', $param.getName());
    $this.assertEquals('var', $param.getTypeName());
    $this.assertEquals(Type::$VAR, $param.getType());
  }

  /**
   * Tests getParameter()
   *
   */
  [@test]
  public void oneArgMethodGetNonExistantParameters() {
    $this.assertNull($this.oneArgMethod.getParameter(1));
  }

  /**
   * Tests getParameter()
   *
   */
  [@test]
  public void noArgsMethodGetNonExistantParameters() {
    $this.assertNull($this.noArgsMethod.getParameter(0));
  }

  /**
   * Tests getReturnTypeName()
   *
   */
  [@test]
  public void arrayReturnTypeName() {
    $this.assertEquals('string[]', $this.getClass().getMethod('nameVariants').getReturnTypeName());
  }

  /**
   * Tests getReturnType()
   *
   */
  [@test]
  public void arrayReturnType() {
    $t= $this.getClass().getMethod('nameVariants').getReturnType();
    $this.assertInstanceOf('lang.ArrayType', $t);
    $this.assertEquals('string', $t.componentType());
  }
  
  /**
   * Fixture for the following two tests
   *
   */
  protected var variableReturnTypeFixture() {
  }

  /**
   * Tests getReturnTypeName()
   *
   */
  [@test]
  public void variableReturnTypeName() {
    $this.assertEquals('var', $this.getClass().getMethod('variableReturnTypeFixture').getReturnTypeName());
  }

  /**
   * Tests getReturnType()
   *
   */
  [@test]
  public void variableReturnType() {
    $this.assertEquals(Type::$VAR, $this.getClass().getMethod('variableReturnTypeFixture').getReturnType());
  }

  /**
   * Fixture for the following two tests
   *
   */
  protected void voidReturnTypeFixture() {
  }

  /**
   * Tests getReturnTypeName()
   *
   */
  [@test]
  public void voidReturnTypeName() {
    $this.assertEquals('void', $this.getClass().getMethod('voidReturnTypeFixture').getReturnTypeName());
  }

  /**
   * Tests getReturnType()
   *
   */
  [@test]
  public void voidReturnType() {
    $this.assertEquals(Type::$VOID, $this.getClass().getMethod('voidReturnTypeFixture').getReturnType());
  }

  /**
   * Fixture for the following two tests
   *
   */
  protected void operate() throws IllegalStateException {
  }

  /**
   * Tests getExceptionNames()
   *
   */
  [@test]
  public void noArgsMethodExceptionNames() {
    $this.assertEquals([], $this.noArgsMethod.getExceptionNames());
  }

  /**
   * Tests getExceptionNames()
   *
   */
  [@test]
  public void operateExceptionNames() {
    $this.assertEquals(
      ['lang.IllegalStateException'], 
      $this.getClass().getMethod('operate').getExceptionNames()
    );
  }

  /**
   * Tests getExceptionTypes()
   *
   */
  [@test]
  public void noArgsMethodExceptionTypes() {
    $this.assertEquals([], $this.noArgsMethod.getExceptionTypes());
  }

  /**
   * Tests getExceptionTypes()
   *
   */
  [@test]
  public void operateExceptionTypes() {
    $this.assertEquals(
      [lang.IllegalStateException::class], 
      $this.getClass().getMethod('operate').getExceptionTypes()
    );
  }
}
