/* This class is part of the XP framework
 *
 * $Id$ 
 */

package unittests;

import unittest.TestCase;
import native standard.in_array;

/**
 * Test lang.XPClass
 *
 */
public class XPClassTests extends TestCase {

  /**
   * Tests getName()
   *
   */
  [@test]
  public void className() {
    $this.assertEquals('unittests.XPClassTests', $this.getClass().getName());
  }

  /**
   * Tests getClassName()
   *
   */
  [@test]
  public void classNameShortCut() {
    $this.assertEquals('unittests.XPClassTests', $this.getClassName());
  }

  /**
   * Tests forName()
   *
   */
  [@test]
  public void forName() {
    $this.assertEquals($this.getClass(), XPClass::forName('unittests.XPClassTests'));
  }

  /**
   * Tests forName()
   *
   */
  [@test, @expect('lang.ClassNotFoundException')]
  public void forNameNonExistant() {
    XPClass::forName('non-existant-class');
  }

  /**
   * Tests hasField()
   *
   */
  [@test]
  public void hasNameField() {
    $this.assertTrue($this.getClass().hasField('name'));
  }

  /**
   * Tests getField()
   *
   */
  [@test]
  public void nameField() {
    $field= $this.getClass().getField('name');
    $this.assertInstanceOf('lang.reflect.Field', $field);
    $this.assertEquals('name', $field.getName());
  }

  /**
   * Tests getFields()
   *
   */
  [@test]
  public void thisClassFields() {
    $fields= $this.getClass().getFields();
    $this.assertEquals(1, $fields.length);
    $this.assertInstanceOf('lang.reflect.Field', $fields[0]);
    $this.assertEquals('name', $fields[0].getName());
  }

  /**
   * Tests hasField()
   *
   */
  [@test]
  public void doesNotHaveNonExistantField() {
    $this.assertFalse($this.getClass().hasField('non-existant'));
  }

  /**
   * Tests getField()
   *
   */
  [@test, @expect('lang.ElementNotFoundException')]
  public void getNonExistantField() {
    $this.getClass().getField('non-existant');
  }

  /**
   * Tests hasMethod()
   *
   */
  [@test]
  public void hasNameMethod() {
    $this.assertTrue($this.getClass().hasMethod($this.name));
  }

  /**
   * Tests getMethod()
   *
   */
  [@test]
  public void nameMethod() {
    $method= $this.getClass().getMethod($this.name);
    $this.assertInstanceOf('lang.reflect.Method', $method);
    $this.assertEquals($this.name, $method.getName());
  }

  /**
   * Tests hasMethod()
   *
   */
  [@test]
  public void doesNotHaveNonExistantMethod() {
    $this.assertFalse($this.getClass().hasMethod('non-existant'));
  }

  /**
   * Tests getMethod()
   *
   */
  [@test, @expect('lang.ElementNotFoundException')]
  public void getNonExistantMethod() {
    $this.getClass().getMethod('non-existant');
  }

  /**
   * Tests getMethods()
   *
   */
  [@test]
  public void objectMethods() {
    $methods= Object::class.getMethods();
    $expected= ['getClass', 'getClassName', 'equals', 'hashCode', 'toString'];
    $this.assertEquals($expected.length, $methods.length);
    foreach ($method in $methods) {
      $this.assertTrue(in_array($method.getName(), $expected));
    }
  }

  /**
   * Tests isInstance()
   *
   */
  [@test]
  public void thisIsInstanceofSelf() {
    $this.assertTrue($this.getClass().isInstance($this));
  }

  /**
   * Tests isInstance()
   *
   */
  [@test]
  public void thisIsInstanceofParentClass() {
    $this.assertTrue(unittest.TestCase::class.isInstance($this));
  }

  /**
   * Tests isInstance()
   *
   */
  [@test]
  public void thisIsInstanceofObjectClass() {
    $this.assertTrue(lang.Object::class.isInstance($this));
  }

  /**
   * Tests isInstance()
   *
   */
  [@test]
  public void thisIsNotAnInstanceOfThrowable() {
    $this.assertFalse(lang.Throwable::class.isInstance($this));
  }

  /**
   * Tests isInstance()
   *
   */
  [@test]
  public void nullIsNotAnInstanceOfObject() {
    $this.assertFalse(lang.Object::class.isInstance(null));
  }

  /**
   * Tests hasAnnotations()
   *
   */
  [@test]
  public void annotatedClassHasAnnotations() {
    $this.assertTrue(XPClass::forName('unittests.AnnotatedClass').hasAnnotations());
  }

  /**
   * Tests hasAnnotation()
   *
   */
  [@test]
  public void annotatedClassHasWebserviceAnnotation() {
    $this.assertTrue(XPClass::forName('unittests.AnnotatedClass').hasAnnotation('webservice'));
  }

  /**
   * Tests hasAnnotation()
   *
   */
  [@test]
  public void annotatedClassDoesNotHaveTestAnnotation() {
    $this.assertFalse(XPClass::forName('unittests.AnnotatedClass').hasAnnotation('test'));
  }

  /**
   * Tests getAnnotations()
   *
   */
  [@test]
  public void annotatedClassAnnotations() {
    $this.assertEquals([ webservice : null ], XPClass::forName('unittests.AnnotatedClass').getAnnotations());
  }

  /**
   * Tests getAnnotations()
   *
   */
  [@test]
  public void annotatedClassChildAnnotations() {
    $this.assertEquals([ webservice : null ], XPClass::forName('unittests.AnnotatedClassChild').getAnnotations());
  }

  /**
   * Tests getAnnotation()
   *
   */
  [@test]
  public void annotatedClassWebserviceAnnotations() {
    $this.assertNull(XPClass::forName('unittests.AnnotatedClass').getAnnotation('webservice'));
  }

  /**
   * Tests hasAnnotations()
   *
   */
  [@test]
  public void thisClassHasNoAnnotations() {
    $this.assertFalse($this.getClass().hasAnnotations());
  }

  /**
   * Tests getAnnotations()
   *
   */
  [@test]
  public void thisClassAnnotations() {
    $this.assertEquals([], $this.getClass().getAnnotations());
  }

  /**
   * Tests getAnnotation()
   *
   */
  [@test, @expect('lang.ElementNotFoundException')]
  public void thisClassWebserviceAnnotation() {
    $this.getClass().getAnnotation('webservice');
  }

  /**
   * Tests getParentclass()
   *
   */
  [@test]
  public void thisClassParent() {
    $this.assertEquals(unittest.TestCase::class, $this.getClass().getParentclass());
  }

  /**
   * Tests getParentclass()
   *
   */
  [@test]
  public void objectsClassParent() {
    $this.assertNull(Object::class.getParentclass());
  }

  /**
   * Tests getPackage()
   *
   */
  [@test]
  public void thisClassPackage() {
    $this.assertEquals(new lang.reflect.Package('unittests'), $this.getClass().getPackage());
  }

  /**
   * Tests getInterfaces()
   *
   */
  [@test]
  public void objectImplementsGenericInterface() {
    $this.assertEquals([Generic::class], Object::class.getInterfaces());
  }

  /**
   * Tests getComment()
   *
   */
  [@test]
  public void thisClassComment() {
    $this.assertEquals('Test lang.XPClass', $this.getClass().getComment());
  }

  /**
   * Tests Method::getComment()
   *
   */
  [@test]
  public void thisMethodsComment() {
    $this.assertEquals(
      'Tests Method::getComment()', 
      $this.getClass().getMethod($this.name).getComment()
    );
  }

  /**
   * Tests isSubclassOf()
   *
   */
  [@test]
  public void thisIsSubclassOfObject() {
    $this.assertTrue($this.getClass().isSubclassOf('lang.Object'));
  }

  /**
   * Tests isSubclassOf()
   *
   */
  [@test]
  public void thisIsSubclassOfObjectClass() {
    $this.assertTrue($this.getClass().isSubclassOf(Object::class));
  }

  /**
   * Tests isSubclassOf()
   *
   */
  [@test]
  public void thisIsSubclassOfGenericClass() {
    $this.assertTrue($this.getClass().isSubclassOf(Generic::class));
  }

  /**
   * Tests isSubclassOf()
   *
   */
  [@test]
  public void thisIsSubclassOfParentClass() {
    $this.assertTrue($this.getClass().isSubclassOf($this.getClass().getParentclass()));
  }

  /**
   * Tests isSubclassOf()
   *
   */
  [@test]
  public void thisIsNotSubclassOfSelfClass() {
    $this.assertFalse($this.getClass().isSubclassOf(self::class));
  }

  /**
   * Tests hasMethod() with "name" as argument (ECMAScript 5's
   * Function.prototype.name property should not be reported as
   * method)
   *
   */
  [@test]
  public void doesNotHaveNameMethod() {
    $this.assertFalse($this.getClass().hasMethod('name'));
  }

  /**
   * Tests getMethod() with "name" as argument (ECMAScript 5's
   * Function.prototype.name property should not be reported as
   * method)
   *
   */
  [@test, @expect('lang.ElementNotFoundException')]
  public void getNameMethod() {
    $this.getClass().getMethod('name'); 
  }
}
