/* This class is part of the XP framework
 *
 * $Id$ 
 */

package tests;

import unittest.TestCase;

/**
 * Test lang.XPClass
 *
 */
public class XPClassTests extends TestCase {

  /**
   * Tests getName()
   *
   */
  [@test]
  public void className() {
    $this.assertEquals('tests.XPClassTests', $this.getClass().getName());
  }

  /**
   * Tests getClassName()
   *
   */
  [@test]
  public void classNameShortCut() {
    $this.assertEquals('tests.XPClassTests', $this.getClassName());
  }

  /**
   * Tests forName()
   *
   */
  [@test]
  public void forName() {
    $this.assertEquals($this.getClass(), XPClass::forName('tests.XPClassTests'));
  }

  /**
   * Tests forName()
   *
   */
  [@test, @expect('lang.ClassNotFoundException')]
  public void forNameNonExistant() {
    XPClass::forName('non-existant-class');
  }

  /**
   * Tests hasField()
   *
   */
  [@test]
  public void hasNameField() {
    $this.assertTrue($this.getClass().hasField('name'));
  }

  /**
   * Tests getField()
   *
   */
  [@test]
  public void nameField() {
    $field= $this.getClass().getField('name');
    $this.assertInstanceOf('lang.reflect.Field', $field);
    $this.assertEquals('name', $field.getName());
  }

  /**
   * Tests hasField()
   *
   */
  [@test]
  public void doesNotHaveNonExistantField() {
    $this.assertFalse($this.getClass().hasField('non-existant'));
  }

  /**
   * Tests getField()
   *
   */
  [@test, @expect('lang.ElementNotFoundException')]
  public void getNonExistantField() {
    $this.getClass().getField('non-existant');
  }

  /**
   * Tests hasMethod()
   *
   */
  [@test]
  public void hasNameMethod() {
    $this.assertTrue($this.getClass().hasMethod('name'));
  }

  /**
   * Tests getMethod()
   *
   */
  [@test]
  public void nameMethod() {
    $Method= $this.getClass().getMethod('name');
    $this.assertInstanceOf('lang.reflect.Method', $Method);
    $this.assertEquals('name', $Method.getName());
  }

  /**
   * Tests hasMethod()
   *
   */
  [@test]
  public void doesNotHaveNonExistantMethod() {
    $this.assertFalse($this.getClass().hasMethod('non-existant'));
  }

  /**
   * Tests getMethod()
   *
   */
  [@test, @expect('lang.ElementNotFoundException')]
  public void getNonExistantMethod() {
    $this.getClass().getMethod('non-existant');
  }

  /**
   * Tests isInstance()
   *
   */
  [@test]
  public void thisIsInstanceofSelf() {
    $this.assertTrue($this.getClass().isInstance($this));
  }

  /**
   * Tests isInstance()
   *
   */
  [@test]
  public void thisIsInstanceofParentClass() {
    $this.assertTrue(unittest.TestCase::class.isInstance($this));
  }

  /**
   * Tests isInstance()
   *
   */
  [@test]
  public void thisIsInstanceofObjectClass() {
    $this.assertTrue(lang.Object::class.isInstance($this));
  }

  /**
   * Tests isInstance()
   *
   */
  [@test]
  public void thisIsNotAnInstanceOfThrowable() {
    $this.assertFalse(lang.Throwable::class.isInstance($this));
  }

  /**
   * Tests isInstance()
   *
   */
  [@test]
  public void nullIsNotAnInstanceOfObject() {
    $this.assertFalse(lang.Object::class.isInstance(null));
  }

  /**
   * Tests hasAnnotations()
   *
   */
  [@test]
  public void annotatedClassHasAnnotations() {
    $this.assertTrue(XPClass::forName('tests.AnnotatedClass').hasAnnotations());
  }

  /**
   * Tests hasAnnotation()
   *
   */
  [@test]
  public void annotatedClassHasWebserviceAnnotation() {
    $this.assertTrue(XPClass::forName('tests.AnnotatedClass').hasAnnotation('webservice'));
  }

  /**
   * Tests hasAnnotation()
   *
   */
  [@test]
  public void annotatedClassDoesNotHaveTestAnnotation() {
    $this.assertFalse(XPClass::forName('tests.AnnotatedClass').hasAnnotation('test'));
  }

  /**
   * Tests getAnnotations()
   *
   */
  [@test]
  public void annotatedClassAnnotations() {
    $this.assertEquals([ webservice : null ], XPClass::forName('tests.AnnotatedClass').getAnnotations());
  }

  /**
   * Tests getAnnotations()
   *
   */
  [@test]
  public void annotatedClassChildAnnotations() {
    $this.assertEquals([ webservice : null ], XPClass::forName('tests.AnnotatedClassChild').getAnnotations());
  }

  /**
   * Tests getAnnotation()
   *
   */
  [@test]
  public void annotatedClassWebserviceAnnotations() {
    $this.assertNull(XPClass::forName('tests.AnnotatedClass').getAnnotation('webservice'));
  }

  /**
   * Tests hasAnnotations()
   *
   */
  [@test]
  public void thisClassHasNoAnnotations() {
    $this.assertFalse($this.getClass().hasAnnotations());
  }

  /**
   * Tests getAnnotations()
   *
   */
  [@test]
  public void thisClassAnnotations() {
    $this.assertEquals([], $this.getClass().getAnnotations());
  }

  /**
   * Tests getAnnotation()
   *
   */
  [@test, @expect('lang.ElementNotFoundException')]
  public void thisClassWebserviceAnnotation() {
    $this.getClass().getAnnotation('webservice');
  }

  /**
   * Tests getParentclass()
   *
   */
  [@test]
  public void thisClassParent() {
    $this.assertEquals(unittest.TestCase::class, $this.getClass().getParentclass());
  }
}
